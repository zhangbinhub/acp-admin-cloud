ext {
    println("Environment          : JAVA_HOME=$System.env.JAVA_HOME")
    println("Gradle Version       : ${projectProperties.getProperty('gradleVersion')}")
    println("Target JDK Version   : ${projectProperties.getProperty('javaVersion')}")
    println("Kotlin Version       : $versions.kotlin")
    println("Spring Boot Version  : $versions.springBoot")
    println("Acp Version          : $versions.acp")
    println("Encoding             : ${projectProperties.getProperty('encoding')}")
    println("Build Version        : ${projectProperties.getProperty('version')}")
}

buildscript {
    ext {
        projectProperties = new Properties()
        projectProperties.load(new FileInputStream("$rootDir/project.properties"))
    }
    apply from: "$rootDir/gradle/dependencies.gradle"
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$versions.kotlin"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$versions.springBoot"
    }
    repositories {
        mavenLocal()
        maven {
            url = new URI(projectProperties.getProperty('mavenCentralUrl').toString())
            allowInsecureProtocol = true
        }
        mavenCentral()
    }
}

apply from: "$rootDir/gradle/globalTask.gradle"

allprojects {

    group project.group.toString().isBlank() ? projectProperties.getProperty('group') : "${projectProperties.getProperty('group')}.$project.group"
    version projectProperties.getProperty('version')

    apply from: "$rootDir/gradle/dependencies.gradle"

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-noarg'
    apply plugin: 'kotlin-jpa'
    apply plugin: 'idea'

    apply from: "$rootDir/gradle/environment.gradle"
    apply from: "$rootDir/gradle/commonTask.gradle"
    apply from: "$rootDir/gradle/publish.gradle"

    sourceCompatibility = projectProperties.getProperty('javaVersion')
    targetCompatibility = projectProperties.getProperty('javaVersion')

    buildscript {
        repositories {
            mavenLocal()
            maven {
                url = new URI(projectProperties.getProperty('mavenCentralUrl').toString())
                allowInsecureProtocol = true
            }
            mavenCentral()
        }
    }

    repositories {
        mavenLocal()
        maven {
            url = new URI(projectProperties.getProperty('mavenCentralUrl').toString())
            allowInsecureProtocol = true
        }
        mavenCentral()
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter:$versions.jupiter")
        testImplementation("org.junit.platform:junit-platform-launcher:$versions.junitPlatform")
        testImplementation "org.jetbrains.kotlin:kotlin-test"
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"
        implementation "org.jetbrains.kotlin:kotlin-stdlib"
        implementation "org.jetbrains.kotlin:kotlin-reflect"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinCoroutines"
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        options.charSet = projectProperties.getProperty('encoding')
        options.docEncoding = projectProperties.getProperty('encoding')
        options.encoding = projectProperties.getProperty('encoding')
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    compileJava {
        options.encoding = projectProperties.getProperty('encoding')
    }
    compileJava.dependsOn(processResources)
    compileTestJava {
        options.encoding = projectProperties.getProperty('encoding')
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = projectProperties.getProperty('javaVersion')
        }
    }
    compileKotlin.dependsOn(processResources)
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = projectProperties.getProperty('javaVersion')
        }
    }

    test {
        useJUnitPlatform()
        exclude '**/*nobuild**'
    }
}